//go:build generate

//go:generate go run gen_languages.go
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"log"
	"net/http"
	"os"
	"slices"
	"text/template"
	"time"
)

const siteMatrixURL = "https://commons.wikimedia.org/w/api.php?action=sitematrix&smtype=language&format=json"
const languagesGoPath = "languages.go"

type languagesGoTemplateData struct {
	LastUpdated   string
	LanguageCodes []string
}

const languagesGoTemplate = `// File generated by gen_languages.go; DO NOT EDIT.
// Last updated: {{.LastUpdated}}
package main

var supportedLanguageCodes = map[string]struct{}{
	{{range .LanguageCodes -}}
	"{{.}}": struct{}{},
	{{end}}
}

func IsSupportedLanguage(code string) bool {
	_, found := supportedLanguageCodes[code]
	return found
}

func UnsupportedLanguage(code string) bool {
	return !IsSupportedLanguage(code)
}
`

// Sample start of response:
//
//	{
//	  "sitematrix": {
//	    "count": 1057,
//	    "0": {
//	      "code": "aa",
//	      "name": "Qaf√°r af",
//	      "site": [
//	        {
//	          "url": "https://aa.wikipedia.org",
//	          "dbname": "aawiki",
//	          "code": "wiki",
//	          "sitename": "Wikipedia",
//	          "closed": ""
//	        },
//	        {
//	          "url": "https://aa.wiktionary.org",
//	          "dbname": "aawiktionary",
//	          "code": "wiktionary",
//	          "sitename": "Wiktionary",
//	          "closed": ""
//	        },
//	        {
//	          "url": "https://aa.wikibooks.org",
//	          "dbname": "aawikibooks",
//	          "code": "wikibooks",
//	          "sitename": "Wikibooks",
//	          "closed": ""
//	        }
//	      ],
//	      "dir": "ltr",
//	      "localname": "Afar"
//	    },
type siteMatrixResp struct {
	SiteMatrix map[string]json.RawMessage `json:"sitematrix"`
}
type siteMatrixRespEntry struct {
	Code string `json:"code"`
}

func main() {
	req, err := http.NewRequest("GET", siteMatrixURL, nil)
	if err != nil {
		log.Fatalln(err)
	}
	req.Header.Add("User-Agent", "wt 1.0 / wiki-translate / https://github.com/alex-vit/wt")

	fmt.Println("GET", siteMatrixURL)
	httpResp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer httpResp.Body.Close()

	// bytes, err := io.ReadAll(resp.Body)
	// if err != nil {
	// 	log.Fatalln(err)
	// }
	// fmt.Println(string(bytes))

	var resp siteMatrixResp
	err = json.NewDecoder(httpResp.Body).Decode(&resp)
	if err != nil {
		log.Fatalln(err)
	}

	var languageCodes []string
	for key, rawJson := range resp.SiteMatrix {
		// skip the
		//	"count": 1049
		if key == "count" {
			continue
		}

		var entry siteMatrixRespEntry
		err := json.Unmarshal(rawJson, &entry)
		if err != nil {
			fmt.Println(err)
			continue
		}
		languageCodes = append(languageCodes, entry.Code)
	}
	slices.Sort(languageCodes)

	templData := languagesGoTemplateData{
		LastUpdated:   time.Now().Format(time.DateOnly),
		LanguageCodes: languageCodes}

	templ, err := template.New("").Parse(languagesGoTemplate)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	var bb bytes.Buffer
	err = templ.Execute(&bb, templData)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	src, err := format.Source(bb.Bytes())
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	err = os.WriteFile(languagesGoPath, src, 0755)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	fmt.Println("Wrote", languagesGoPath)
}
